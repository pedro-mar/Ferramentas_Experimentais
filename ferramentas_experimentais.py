# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PluginTeste
                                 A QGIS plugin
 Plugin para add procssings teste
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-02
        copyright            : (C) 2021 by Pedro Martins
        email                : pedromartins.souza@eb.mil.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Pedro Martins'
__date__ = '2021-03-02'
__copyright__ = '(C) 2021 by Pedro Martins'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import sys
import inspect

from qgis.core import(QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingException,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProject,
                       QgsMapLayer,
                       QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform,
                       QgsProject,
                       QgsPointXY,
                       QgsAbstractFeatureSource,
                       QgsExpression,
                       QgsVectorLayer,
                       QgsField,
                       QgsExpressionContext,
                       QgsExpressionContextScope,
                       QgsAuxiliaryStorage,
                       QgsPropertyDefinition,
                       QgsFeature
                       )
from .plugin_teste_provider import PluginTesteProvider
from PyQt5.QtWidgets import * 
from PyQt5 import QtCore, QtGui 
from PyQt5.QtGui import * 
from PyQt5.QtCore import * 
#from qgis import processing
from qgis.utils import iface
#cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
'''
if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)

from pathlib import Path
'''

class PluginTestePlugin(object):

    def __init__(self):
        self.provider = None

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = PluginTesteProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        self.initProcessing()

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)

class AzimButton:

    def __init__(self, iface):
        self.iface = iface

    def initGui(self):
        '''Start configurations'''
        self.action = QAction(QIcon("C:/Users/pedromartins/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/plugin_teste/azim.png"), "Calcula Azimute", self.iface.mainWindow())
        self.action.setWhatsThis("Configuration for test plugin")
        self.action.setStatusTip("This is status tip")
        # self.toolbar = self.iface.addToolBar(u"Proxy settings")
        self.AbsButton = QPushButton()
        self.iface.addToolBarWidget(self.AbsButton)
    
        self.action.triggered.connect(self.calazim)
        # self.comboBox.activated[str].connect(self.modifyProxy)
# create action that will start plugin configuration
        
        
        
        #QObject.connect(self.action, SIGNAL("triggered()"), self.run)

        # add toolbar button and menu item
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu("&Plugin teste", self.action)
        # iconPath = ':/plugins/proxySetter/proxy.png'
        # self.actionCBox = QAction(QIcon(iconPath), u"Setting proxy", self.iface.mainWindow())

        # self.actionCBox.setStatusTip(None)
        # self.actionCBox.setWhatsThis(None)
        # self.actionCBox.setCheckable(True)

        # self.toolbar.addAction(self.actionCBox)

    def initSignals(self):
        pass


    def calazim(self):
        layer=iface.activeLayer()
        field = QgsField( 'id', QVariant.Double )

        cal=QgsAuxiliaryStorage()
        auxlyr=cal.createAuxiliaryLayer(field,layer)
        layer.setAuxiliaryLayer(auxlyr)
        auxLayer = layer.auxiliaryLayer()
        vdef=QgsPropertyDefinition("azim", 
        1, 
        "azimute", 
        "calcula angulo azimute",
        "angulo") 
        auxLayer.addAuxiliaryField(vdef)
        auxFields = auxLayer.fields()
        features=layer.getFeatures()
        for feature in features:
            geom=feature.geometry()
            ombb=geom.orientedMinimumBoundingBox()
            auxFeature = QgsFeature(auxFields)
            auxFeature['ASPK']= feature['id']
            angazim=ombb[2]
            if ombb[4]<ombb[3]:
                angazim=ombb[2]-90
                if angazim<0:
                    angazim=ombb[2]+90
            auxFeature['angulo_azim'] = angazim
            '''
            auxFeature['lado_lar'] = ombb[3]*1000
            auxFeature['lado_alt'] = ombb[4]*1000
            auxFeature['ver_boll'] = invertido
            '''
            auxLayer.addFeature(auxFeature)
            print("testeaqui")

    def unload(self):
        pass
